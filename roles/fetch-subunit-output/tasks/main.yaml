# TODO(mordred) tox_envlist can be a list. If it is, we should look for each
# command in each envlist dir until we find one that has it.
- name: Set paths to testr and stestr commands from tox
  set_fact:
    testr_command: .tox/{{ tox_envlist }}/bin/testr
    stestr_command: .tox/{{ tox_envlist }}/bin/stestr
  when: tox_envlist is defined

- name: Set paths to testr and stestr commands from system
  set_fact:
    testr_command: testr
    stestr_command: stestr
  when: tox_envlist is not defined

# NOTE(mordred) Check for the failing file in the .stestr directory instead of
# just the directory. An stestr run that fails due to python parsing errors
# will leave a directory but with no test results, which will result in an
# error in the subunit generation phase.
- name: Check for stestr directory
  stat:
    path: "{{ zuul_work_dir }}/.stestr/failing"
  register: stestr_stat

- name: Generate stestr subunit file
  shell:
    cmd: "{{ stestr_command }} last --subunit > ./testrepository.subunit"
    chdir: "{{ zuul_work_dir }}"
  when: stestr_stat.stat.exists

- name: Check for testr directory
  stat:
    path: "{{ zuul_work_dir }}/.testrepository"
  register: testr_stat
  when: not stestr_stat.stat.exists

- name: Generate testrepository.subunit file
  shell:
    cmd: "{{ testr_command }} last --subunit > ./testrepository.subunit"
    chdir: "{{ zuul_work_dir }}"
  when:
    - not stestr_stat.stat.exists
    - testr_stat.stat.exists

- name: Process and fetch subunit results
  include: process.yaml
  when: stestr_stat.stat.exists or testr_stat.stat.exists
